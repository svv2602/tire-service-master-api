#!/usr/bin/env ruby

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
require 'net/http'
require 'uri'
require 'json'

API_BASE = 'http://localhost:8000/api/v1'

def login_admin
  uri = URI("#{API_BASE}/auth/login")
  http = Net::HTTP.new(uri.host, uri.port)
  
  request = Net::HTTP::Post.new(uri)
  request['Content-Type'] = 'application/json'
  request.body = {
    auth: {
      email: 'admin@test.com',
      password: 'admin123'
    }
  }.to_json
  
  response = http.request(request)
  
  if response.code == '200'
    data = JSON.parse(response.body)
    puts "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
    return data['tokens']['access']
  else
    puts "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: #{response.body}"
    return nil
  end
end

def test_partner_update_with_logo(token, partner_id)
  uri = URI("#{API_BASE}/partners/#{partner_id}")
  http = Net::HTTP.new(uri.host, uri.port)
  
  # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
  logo_content = "fake image data for testing"
  
  # –°–æ–∑–¥–∞–µ–º multipart/form-data –∑–∞–ø—Ä–æ—Å
  boundary = "----WebKitFormBoundary7MA4YWxkTrZu0gW"
  
  body = []
  body << "--#{boundary}"
  body << 'Content-Disposition: form-data; name="partner[company_name]"'
  body << ""
  body << "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è #{Time.now.to_i}"
  
  body << "--#{boundary}"
  body << 'Content-Disposition: form-data; name="partner[contact_person]"'
  body << ""
  body << "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"
  
  body << "--#{boundary}"
  body << 'Content-Disposition: form-data; name="partner[legal_address]"'
  body << ""
  body << "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å"
  
  body << "--#{boundary}"
  body << 'Content-Disposition: form-data; name="partner[logo]"; filename="test_logo.jpg"'
  body << 'Content-Type: image/jpeg'
  body << ""
  body << logo_content
  
  body << "--#{boundary}--"
  
  request = Net::HTTP::Put.new(uri)
  request['Authorization'] = "Bearer #{token}"
  request['Content-Type'] = "multipart/form-data; boundary=#{boundary}"
  request.body = body.join("\r\n")
  
  puts "üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ #{partner_id}..."
  response = http.request(request)
  
  puts "üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: #{response.code}"
  
  if response.code == '200'
    puts "‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    begin
      # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8
      response_body = response.body.force_encoding('UTF-8')
      data = JSON.parse(response_body)
      puts "üìÑ –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã"
      
      if data['logo'] && data['logo'] != data['logo_url']
        puts "‚úÖ –õ–æ–≥–æ—Ç–∏–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: #{data['logo']}"
      else
        puts "‚ùå –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–ª–µ logo: #{data['logo']}"
        puts "üìù logo_url: #{data['logo_url']}"
      end
    rescue JSON::ParserError => e
      puts "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: #{e.message}"
      puts "üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: #{response.body[0..200]}"
    rescue => e
      puts "‚ùå –û—à–∏–±–∫–∞: #{e.message}"
    end
  else
    puts "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞: #{response.code}"
    puts "üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: #{response.body[0..200]}"
  end
end

# –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
puts "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"
puts "=" * 50

token = login_admin
if token
  test_partner_update_with_logo(token, 1)
else
  puts "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
end 