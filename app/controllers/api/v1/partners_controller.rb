module Api
  module V1
    class PartnersController < ApiController
      before_action :set_partner, only: [:show, :update, :destroy, :toggle_active, :related_data]
      before_action :authorize_admin, except: [:index, :show, :create, :create_test, :toggle_active]
      skip_before_action :authenticate_request, only: [:index, :create_test, :create]
      
      # GET /api/v1/partners
      def index
        @partners = Partner.includes(:user, :region, :city).all
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–º—É –ª–∏—Ü—É –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)
        if params[:query].present?
          @partners = @partners.joins(:user).where(
            "LOWER(partners.company_name) LIKE LOWER(?) OR LOWER(partners.contact_person) LIKE LOWER(?) OR users.phone LIKE ?", 
            "%#{params[:query]}%", "%#{params[:query]}%", "%#{params[:query]}%"
          )
        end
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        page = (params[:page] || 1).to_i
        per_page = (params[:per_page] || 10).to_i
        offset = (page - 1) * per_page
        
        total_count = @partners.count
        @partners = @partners.offset(offset).limit(per_page)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if @partners.empty?
          render json: {
            data: [],
            pagination: {
              current_page: page,
              total_pages: 0,
              total_count: 0,
              per_page: per_page
            }
          }
          return
        end
        
        total_pages = (total_count.to_f / per_page).ceil
        
        render json: {
          data: @partners.as_json(include: { user: { only: [:id, :email, :phone, :first_name, :last_name] } }),
          pagination: {
            current_page: page,
            total_pages: total_pages,
            total_count: total_count,
            per_page: per_page
          }
        }
      end
      
      # GET /api/v1/partners/:id
      def show
        render json: @partner.as_json(include: { 
          user: { only: [:id, :email, :phone, :first_name, :last_name] },
          region: { only: [:id, :name, :code] },
          city: { only: [:id, :name] }
        })
      end
      
      # POST /api/v1/partners
      def create
        Rails.logger.info("–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: #{params.inspect}")
        
        ActiveRecord::Base.transaction do
          # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω
          if params[:user_id].blank? && params[:partner][:user_attributes].present?
            user_data = params[:partner][:user_attributes].permit(:email, :password, :phone, :first_name, :last_name)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            user_data[:password] ||= SecureRandom.hex(8)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ email
            generated_password = user_data[:password]
            
            Rails.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏: #{user_data.inspect}")
            
            @user = User.new(user_data)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            partner_role = UserRole.find_by(name: 'partner')
            @user.role_id = partner_role&.id || 4
            # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            @user.skip_role_specific_record = true
            
            unless @user.save
              Rails.logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: #{@user.errors.full_messages}")
              raise ActiveRecord::RecordInvalid.new(@user)
            end
            
            Rails.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: #{@user.id}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            partner_data = partner_params.except(:user_attributes)
            partner_data[:user_id] = @user.id
            
            Rails.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: #{partner_data.inspect}")
            
            @partner = Partner.new(partner_data)
            
            unless @partner.save
              Rails.logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: #{@partner.errors.full_messages}")
              raise ActiveRecord::RecordInvalid.new(@partner)
            end
            
            Rails.logger.info("–ü–∞—Ä—Ç–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: #{@partner.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
            Rails.logger.info("–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: #{@partner.inspect}")
            Rails.logger.info("–û—à–∏–±–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: #{@partner.errors.full_messages}")

            # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–Ω–µ –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞), –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            if !current_user&.admin?
              token = Auth::JsonWebToken.encode_access_token(user_id: @user.id)
              render json: {
                tokens: { access: token },
                user: @user.as_json(only: [:id, :email, :first_name, :last_name, :role, :is_active]),
                partner: @partner.as_json(only: [:id])
              }, status: :created
              return
            end
          else
            # –ï—Å–ª–∏ user_id —É–∫–∞–∑–∞–Ω, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            @partner = Partner.new(partner_params)
            @partner.user_id = params[:user_id]
            
            unless @partner.save
              raise ActiveRecord::RecordInvalid.new(@partner)
            end
          end
        end
        
        Rails.logger.info("üéØ –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ render –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ID: #{@partner&.id}")
        Rails.logger.info("üéØ –ü–∞—Ä—Ç–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: #{@partner.present?}")
        Rails.logger.info("üéØ –ü–∞—Ä—Ç–Ω–µ—Ä –≤–∞–ª–∏–¥–µ–Ω: #{@partner&.valid?}")
        Rails.logger.info("üéØ –û—à–∏–±–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: #{@partner&.errors&.full_messages}")
        
        unless @partner.present?
          Rails.logger.error("üö® @partner –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–µ—Ä–µ–¥ render!")
          raise StandardError.new("–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
        end
        
        render json: @partner.as_json(include: { 
          user: { only: [:id, :email, :phone, :first_name, :last_name] },
          region: { only: [:id, :name, :code] },
          city: { only: [:id, :name] }
        }), status: :created
        
      rescue ActiveRecord::RecordInvalid => e
        Rails.logger.error("üö® ActiveRecord::RecordInvalid –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: #{e.message}")
        Rails.logger.error("üö® –ó–∞–ø–∏—Å—å —Å –æ—à–∏–±–∫–æ–π: #{e.record.class.name}")
        Rails.logger.error("üö® –û—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏: #{e.record.errors.full_messages}")
        Rails.logger.error("üö® Backtrace: #{e.backtrace.first(10).join("\n")}")
        
        errors = {}
        
        if e.record.is_a?(User)
          errors[:user] = e.record.errors.full_messages.map do |message|
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" –¥–ª—è –±–æ–ª–µ–µ —è—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: #{message}"
          end
        elsif e.record.is_a?(Partner)
          errors[:partner] = e.record.errors.full_messages.map do |message|
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ö–æ–º–ø–∞–Ω–∏—è:" –¥–ª—è –±–æ–ª–µ–µ —è—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            "–ö–æ–º–ø–∞–Ω–∏—è: #{message}"
          end
        end
        
        render json: { 
          errors: errors,
          message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
        }, status: :unprocessable_entity
      rescue StandardError => e
        Rails.logger.error("üö® StandardError –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: #{e.message}")
        Rails.logger.error("üö® –ö–ª–∞—Å—Å –æ—à–∏–±–∫–∏: #{e.class.name}")
        Rails.logger.error("üö® Backtrace: #{e.backtrace.first(10).join("\n")}")
        
        render json: { 
          error: e.message,
          message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞." 
        }, status: :unprocessable_entity
      end
      
      # GET /api/v1/partners/:id/related_data
      def related_data
        authorize @partner, :show?
        
        service_points = @partner.service_points.includes(:city)
        operators = @partner.operators.includes(:user)
        
        render json: {
          service_points_count: service_points.count,
          operators_count: operators.count,
          service_points: service_points.map do |sp|
            {
              id: sp.id,
              name: sp.name,
              is_active: sp.is_active
            }
          end,
          operators: operators.map do |op|
            {
              id: op.id,
              user: {
                first_name: op.user.first_name,
                last_name: op.user.last_name,
                email: op.user.email
              }
            }
          end
        }
      end

      # POST /api/v1/partners/create_test
      def create_test
        ActiveRecord::Base.transaction do
          # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          @user = User.create!(
            email: "partner_test_#{Time.now.to_i}@example.com",
            password: 'password',
            password_confirmation: 'password',
            first_name: '–¢–µ—Å—Ç',
            last_name: '–ü–∞—Ä—Ç–Ω–µ—Ä',
            phone: "+38067#{Random.rand(1000000..9999999)}",
            role: UserRole.find_by(name: 'partner')
          )
          
          # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
          @partner = Partner.create!(
            user_id: @user.id,
            company_name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è #{Time.now.to_i}",
            company_description: "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏",
            contact_person: "–¢–µ—Å—Ç –ü–∞—Ä—Ç–Ω–µ—Ä",
            logo_url: "https://via.placeholder.com/150",
            website: "http://test-company.com",
            tax_number: "12345678",
            legal_address: "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123"
          )
        end
        
        render json: @partner.as_json(include: { user: { only: [:id, :email, :phone, :first_name, :last_name] } }), status: :created
        
      rescue ActiveRecord::RecordInvalid => e
        render json: { errors: e.record.errors }, status: :unprocessable_entity
      end
      
      # PUT /api/v1/partners/:id
      def update
        Rails.logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ID: #{params[:id]}")
        Rails.logger.info("–ò—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: #{params[:partner].inspect}")
        Rails.logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: #{partner_params.inspect}")
        
        ActiveRecord::Base.transaction do
          # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
          if params[:partner][:user_attributes].present? && @partner.user
            user_update_params = params.require(:partner).require(:user_attributes).permit(:email, :phone, :first_name, :last_name, :password, :password_confirmation, :role_id)
            
            Rails.logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: #{user_update_params.inspect}")
            
            unless @partner.user.update(user_update_params)
              Rails.logger.error("–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: #{@partner.user.errors.full_messages}")
              raise ActiveRecord::RecordInvalid.new(@partner.user)
            end
          end
          
          # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ (–∏—Å–∫–ª—é—á–∞–µ–º user_attributes, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Ö —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏)
          partner_update_params = partner_params.except(:user_attributes)
          Rails.logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: #{partner_update_params.inspect}")
          
          unless @partner.update(partner_update_params)
            Rails.logger.error("–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: #{@partner.errors.full_messages}")
            raise ActiveRecord::RecordInvalid.new(@partner)
          end
        end
        
        Rails.logger.info("–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: region_id=#{@partner.region_id}, city_id=#{@partner.city_id}")
        
        render json: @partner.as_json(include: { 
          user: { only: [:id, :email, :phone, :first_name, :last_name] },
          region: { only: [:id, :name, :code] },
          city: { only: [:id, :name] }
        })
        
      rescue ActiveRecord::RecordInvalid => e
        errors = {}
        
        if e.record.is_a?(User)
          errors[:user] = e.record.errors.full_messages.map do |message|
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" –¥–ª—è –±–æ–ª–µ–µ —è—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: #{message}"
          end
        elsif e.record.is_a?(Partner)
          errors[:partner] = e.record.errors.full_messages.map do |message|
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ö–æ–º–ø–∞–Ω–∏—è:" –¥–ª—è –±–æ–ª–µ–µ —è—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            "–ö–æ–º–ø–∞–Ω–∏—è: #{message}"
          end
        end
        
        render json: { 
          errors: errors,
          message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
        }, status: :unprocessable_entity
      rescue StandardError => e
        render json: { 
          error: e.message,
          message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞." 
        }, status: :unprocessable_entity
      end
      
      # PATCH /api/v1/partners/:id/toggle_active
      def toggle_active
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Å–∞–º –ø–∞—Ä—Ç–Ω–µ—Ä)
        unless current_user && (current_user.admin? || current_user.id == @partner.user_id)
          render json: { 
            error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è',
            message: '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.'
          }, status: :unauthorized
          return
        end
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä active –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —è–≤–Ω–æ, –∏–Ω–∞—á–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        new_active_status = params[:active].nil? ? !@partner.is_active : ActiveRecord::Type::Boolean.new.cast(params[:active])
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã
        service_points_count = @partner.service_points.count
        managers_count = @partner.managers.count
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        Rails.logger.info("Changing partner status. Partner ID: #{@partner.id}, Current status: #{@partner.is_active}, New status: #{new_active_status}")
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if @partner.toggle_active(new_active_status)
          status_text = new_active_status ? "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" : "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
          
          # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞
          changes = {
            partner_status: status_text,
            affected_service_points: service_points_count,
            affected_managers: managers_count
          }
          
          render json: {
            success: true,
            message: "–ü–∞—Ä—Ç–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ #{status_text}. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ #{service_points_count} —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏ #{managers_count} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.",
            partner: @partner.as_json(include: { user: { only: [:id, :email, :phone, :first_name, :last_name, :role_id] } }),
            changes: changes
          }
        else
          render json: { 
            success: false,
            error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
          }, status: :unprocessable_entity
        end
      end
      
      # DELETE /api/v1/partners/:id
      def destroy
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä
        if @partner.is_active
          # –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, —Å–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
          if @partner.toggle_active(false)
            render json: {
              action: 'deactivated',
              message: '–ü–∞—Ä—Ç–Ω–µ—Ä –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å.',
              partner: @partner.as_json(include: { user: { only: [:id, :email, :phone, :first_name, :last_name] } })
            }, status: :ok
          else
            render json: { 
              error: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
              message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            }, status: :unprocessable_entity
          end
          return
        end

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ç–æ—á–∫–∏
        if @partner.service_points.exists?
          render json: { 
            error: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ç–æ—á–∫–∏. –£–¥–∞–ª–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ç–æ—á–∫–∏.',
            service_points_count: @partner.service_points.count,
            service_points: @partner.service_points.pluck(:id, :name),
            message: "–ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –µ–≥–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ —Ç–æ—á–∫–∏ (#{@partner.service_points.count} —à—Ç.)"
          }, status: :unprocessable_entity
          return
        end
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        user_id = @partner.user_id
        
        begin
          ActiveRecord::Base.transaction do
            # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            @partner.destroy!
            
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user = User.find_by(id: user_id)
            user&.destroy!
          end
          
          head :no_content
        rescue ActiveRecord::StatementInvalid => e
          # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ SQL
          error_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: #{e.message}"
          Rails.logger.error(error_message)
          render json: { 
            error: error_message,
            message: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."
          }, status: :unprocessable_entity
        rescue StandardError => e
          error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: #{e.message}"
          Rails.logger.error(error_message)
          render json: { 
            error: error_message,
            message: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
          }, status: :unprocessable_entity
        end
      end
      
      private
      
      def set_partner
        @partner = Partner.find(params[:id])
      rescue ActiveRecord::RecordNotFound
        render json: { 
          error: "–ü–∞—Ä—Ç–Ω–µ—Ä —Å ID #{params[:id]} –Ω–µ –Ω–∞–π–¥–µ–Ω",
          message: "–ü–∞—Ä—Ç–Ω–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ."
        }, status: :not_found
      end
      
      def partner_params
        permitted_params = params.require(:partner).permit(
          :company_name, :company_description, :contact_person, 
          :logo_url, :website, :tax_number, :legal_address,
          :region_id, :city_id, :is_active,
          user_attributes: [:email, :password, :password_confirmation, :phone, :first_name, :last_name, :role_id]
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        permitted_params[:tax_number] = nil if permitted_params[:tax_number].blank?
        permitted_params[:region_id] = nil if permitted_params[:region_id].blank?
        permitted_params[:city_id] = nil if permitted_params[:city_id].blank?
        
        permitted_params
      end
      
      def authorize_admin
        unless current_user && current_user.admin?
          render json: { 
            error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è',
            message: '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
          }, status: :unauthorized
        end
      end
    end
  end
end 