module Api
  module V1
    class PageContentsController < ApiController
      skip_before_action :authenticate_request, only: [:index, :show, :sections]
      before_action :set_current_user_if_authenticated, only: [:index]
      before_action :authorize_admin, except: [:index, :show, :sections]
      before_action :set_page_content, only: [:show, :update, :destroy, :toggle_active]

      # GET /api/v1/page_contents
      def index
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if Rails.env.development?
          Rails.logger.info "üîç PageContents#index Debug:"
          Rails.logger.info "üë§ Current User: #{current_user&.id} (#{current_user&.email})"
          Rails.logger.info "üîë User Role: #{current_user&.role}"
          Rails.logger.info "üëë Is Admin?: #{current_user&.admin?}"
          Rails.logger.info "üåü Is Super Admin?: #{current_user&.super_admin?}"
        end

        # –î–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        # –ê–¥–º–∏–Ω—ã –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
        if current_user&.admin? || current_user&.super_admin?
          page_contents = PageContent.includes(image_attachment: :blob, gallery_images_attachments: :blob)
        else
          page_contents = PageContent.active.includes(image_attachment: :blob, gallery_images_attachments: :blob)
        end

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —è–∑—ã–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π, –Ω–æ –Ω–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ)
        if params[:language].present?
          page_contents = page_contents.by_language(params[:language])
        elsif !current_user&.admin? && !current_user&.super_admin?
          # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π
          page_contents = page_contents.by_language('uk')
        end
        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —è–∑—ã–∫–∏

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏–∏
        if params[:section].present?
          page_contents = page_contents.by_section(params[:section])
        end

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if params[:content_type].present?
          page_contents = page_contents.by_content_type(params[:content_type])
        end

        # –ü–æ–∏—Å–∫
        if params[:search].present?
          page_contents = page_contents.search(params[:search])
        end

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if (current_user&.admin? || current_user&.super_admin?) && params[:active].present?
          page_contents = page_contents.where(active: params[:active] == 'true')
        end

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        page_contents = page_contents.ordered

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        page = params[:page]&.to_i || 1
        per_page = params[:per_page]&.to_i || 20
        per_page = [per_page, 100].min # –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑

        offset = (page - 1) * per_page
        total = page_contents.count
        page_contents = page_contents.offset(offset).limit(per_page)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        data = page_contents.map do |content|
          content_hash = content.as_json(
            include: {
              image_attachment: { include: :blob },
              gallery_images_attachments: { include: :blob }
            }
          )
          
          # –î–æ–±–∞–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          content_hash['image_url'] = content.image_url
          content_hash['gallery_image_urls'] = content.gallery_image_urls
          
          # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
          content_hash['available_settings_fields'] = content.available_settings_fields
          content_hash['content_type_name'] = content.content_type_name
          content_hash['section_name'] = content.section_name
          content_hash['language_name'] = content.language_name
          
          # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
          dynamic_data = content.dynamic_data
          if dynamic_data
            case content.content_type
            when 'service'
              content_hash['dynamic_data'] = dynamic_data.as_json(only: [:id, :name, :description, :category_id, :icon])
            when 'city'
              content_hash['dynamic_data'] = dynamic_data.as_json(only: [:id, :name, :region_id])
                                                         .map { |city| city.merge('service_points_count' => city['service_points_count'] || 0) }
            when 'article'
              content_hash['dynamic_data'] = dynamic_data.as_json(
                only: [:id, :title, :excerpt, :category, :reading_time, :published_at, :slug],
                include: { author: { only: [:id, :first_name, :last_name] } }
              )
            end
          end
          
          content_hash
        end

        render json: {
          data: data,
          meta: {
            current_page: page,
            per_page: per_page,
            total_pages: (total.to_f / per_page).ceil,
            total_count: total
          }
        }
      end

      # GET /api/v1/page_contents/:id
      def show
        content_hash = @page_content.as_json(
          include: {
            image_attachment: { include: :blob },
            gallery_images_attachments: { include: :blob }
          }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        content_hash['image_url'] = @page_content.image_url
        content_hash['gallery_image_urls'] = @page_content.gallery_image_urls
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        content_hash['available_settings_fields'] = @page_content.available_settings_fields
        content_hash['content_type_name'] = @page_content.content_type_name
        content_hash['section_name'] = @page_content.section_name
        content_hash['language_name'] = @page_content.language_name
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        dynamic_data = @page_content.dynamic_data
        if dynamic_data
          case @page_content.content_type
          when 'service'
            content_hash['dynamic_data'] = dynamic_data.as_json(only: [:id, :name, :description, :category_id, :icon])
          when 'city'
            content_hash['dynamic_data'] = dynamic_data.as_json(only: [:id, :name, :region_id])
                                                       .map { |city| city.merge('service_points_count' => city['service_points_count'] || 0) }
          when 'article'
            content_hash['dynamic_data'] = dynamic_data.as_json(
              only: [:id, :title, :excerpt, :category_id, :reading_time, :published_at, :slug],
              include: { author: { only: [:id, :first_name, :last_name] } }
            )
          end
        end

        render json: content_hash
      end

      # POST /api/v1/page_contents
      def create
        @page_content = PageContent.new(page_content_params)
        
        if @page_content.save
          # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          handle_file_uploads

          render json: serialize_page_content(@page_content), status: :created
        else
          render json: { 
            errors: @page_content.errors.full_messages,
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.'
          }, status: :unprocessable_entity
        end
      end

      # PATCH/PUT /api/v1/page_contents/:id
      def update
        if @page_content.update(page_content_params)
          # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          handle_file_uploads

          render json: serialize_page_content(@page_content)
        else
          render json: { 
            errors: @page_content.errors.full_messages,
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.'
          }, status: :unprocessable_entity
        end
      end

      # DELETE /api/v1/page_contents/:id
      def destroy
        @page_content.destroy!
        head :no_content
      rescue StandardError => e
        render json: { 
          error: e.message,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.'
        }, status: :unprocessable_entity
      end

      # PATCH /api/v1/page_contents/:id/toggle_active
      def toggle_active
        @page_content.update!(active: !@page_content.active)
        render json: serialize_page_content(@page_content)
      rescue StandardError => e
        render json: { 
          error: e.message,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞.'
        }, status: :unprocessable_entity
      end

      # GET /api/v1/page_contents/sections
      def sections
        language = params[:language] || 'uk'
        
        sections = PageContent.by_language(language)
                             .group(:section)
                             .count
                             .map do |section, count|
          {
            key: section,
            name: get_section_name(section),
            count: count
          }
        end

        render json: { data: sections }
      end

      private

      def set_page_content
        @page_content = PageContent.find(params[:id])
      rescue ActiveRecord::RecordNotFound
        render json: { 
          error: '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
          message: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
        }, status: :not_found
      end

      def page_content_params
        params.require(:page_content).permit(
          :section,
          :content_type,
          :section, :content_type, :title, :content, :image_url, :position, :active,
          :image, gallery_images: [],
          settings: {}
        )
      end

      def authorize_admin
        unless @current_user&.admin?
          render json: { 
            error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è',
            message: '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
          }, status: :forbidden
        end
      end

      def handle_file_uploads
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if params[:page_content][:image].present?
          @page_content.image.attach(params[:page_content][:image])
        end

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∞–ª–µ—Ä–µ–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if params[:page_content][:gallery_images].present?
          @page_content.gallery_images.attach(params[:page_content][:gallery_images])
        end
      end

      def serialize_page_content(content)
        content_data = content.as_json
        
        content_data['image_url'] = content.image_url
        content_data['gallery_image_urls'] = content.gallery_image_urls
        content_data['settings'] = content.settings || {}
        content_data['available_settings_fields'] = content.available_settings_fields
        content_data['content_type_name'] = content.content_type_name
        content_data['section_name'] = content.section_name
        content_data['dynamic_data'] = content.dynamic_data

        content_data
      end

      # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
      def get_cities_with_service_points
        City.joins(:service_points)
            .where(is_active: true, service_points: { is_active: true, work_status: 'working' })
            .includes(:region)
            .distinct
            .order(:name)
            .limit(10)
            .map do |city|
              {
                id: city.id,
                name: city.name,
                region_name: city.region.name,
                service_points_count: city.service_points.where(is_active: true, work_status: 'working').count
              }
            end
      end

      # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      def get_services_by_category(category = nil)
        services = Service.where(is_active: true)
        services = services.joins(:service_category).where(service_categories: { name: category }) if category.present?
        
        services.includes(:service_category)
                .limit(8)
                .map do |service|
                  {
                    id: service.id,
                    name: service.name,
                    description: service.description,
                    category_id: service.category_id,
                    icon: service.icon || 'service'
                  }
                end
      rescue
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É—Å–ª—É–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        []
      end

      # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
      def get_knowledge_base_articles(category = nil)
        articles = Article.where(status: 'published')
        articles = articles.where(category_id: category) if category.present?
        
        articles.includes(:author)
                .order(published_at: :desc)
                .limit(6)
                .map do |article|
                  {
                    id: article.id,
                    title: article.title,
                    excerpt: article.excerpt,
                    category_id: article.category_id,
                    reading_time: article.reading_time,
                    author: article.author&.first_name || '–ï–∫—Å–ø–µ—Ä—Ç',
                    published_at: article.published_at,
                    slug: article.slug
                  }
                end
      rescue
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        []
      end

      # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º current_user –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ–º –µ–≥–æ
      def set_current_user_if_authenticated
        return unless request.headers['Authorization'].present?
        
        begin
          authenticate_request
        rescue => e
          # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
          Rails.logger.info "Public access: #{e.message}" if Rails.env.development?
        end
      end
    end
  end
end
