---
openapi: 3.0.1
info:
  title: Tire Service API
  version: v1
  description: API для сервиса шиномонтажа. Предоставляет функциональность для управления
    клиентами, партнерами, сервисными точками, бронированиями и другими аспектами
    бизнеса.
  contact:
    name: API Support
    email: support@tire-service.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  "/api/v1/health":
    get:
      summary: Health check endpoint
      tags:
      - System
      description: Проверка состояния API
      responses:
        '200':
          description: API работает
  "/api/v1/auth/login":
    post:
      summary: Authenticates user and returns JWT token
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: authentication successful
        '401':
          description: Invalid credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                auth:
                  type: object
                  properties:
                    email:
                      type: string
                      example: user@example.com
                    password:
                      type: string
                      example: password
                  required:
                  - email
                  - password
              required:
              - auth
  "/api/v1/clients/register":
    post:
      summary: Регистрирует нового клиента
      tags:
      - Clients
      parameters: []
      responses:
        '201':
          description: Клиент создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_token:
                    type: string
                  message:
                    type: string
                    example: Account created successfully
        '422':
          description: Некорректные параметры
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client:
                  type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
                    password_confirmation:
                      type: string
                    first_name:
                      type: string
                    last_name:
                      type: string
                    middle_name:
                      type: string
                    phone:
                      type: string
                    preferred_notification_method:
                      type: string
                      enum:
                      - email
                      - phone
                      - push
                    marketing_consent:
                      type: boolean
                  required:
                  - email
                  - password
                  - password_confirmation
                  - first_name
                  - last_name
  "/api/v1/clients/{client_id}/bookings":
    get:
      summary: Получает все бронирования для текущего пользователя
      tags:
      - Bookings
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: client_id
        in: path
        required: true
        schema:
          type: integer
      - name: page
        in: query
        required: false
        description: Номер страницы
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Элементов на странице
        schema:
          type: integer
      - name: date
        in: query
        required: false
        description: Фильтр по дате (формат YYYY-MM-DD)
        schema:
          type: string
      - name: from_date
        in: query
        required: false
        description: Начальная дата для фильтра по периоду
        schema:
          type: string
      - name: to_date
        in: query
        required: false
        description: Конечная дата для фильтра по периоду
        schema:
          type: string
      - name: status_id
        in: query
        required: false
        description: Фильтр по ID статуса бронирования
        schema:
          type: integer
      - name: filter
        in: query
        required: false
        description: Предопределенный фильтр (upcoming, past, today)
        schema:
          type: string
      responses:
        '200':
          description: bookings found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    booking_date:
                      type: string
                      format: date
                    start_time:
                      type: string
                    end_time:
                      type: string
                    status:
                      type: object
                      properties:
                        id:
                          oneOf:
                          - type: integer
                          - type: 'null'
                        name:
                          type: string
                    total_price:
                      oneOf:
                      - type: number
                      - type: string
                        pattern: "^\\d+(\\.\\d+)?$"
                      - type: 'null'
                    car_type:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        description:
                          type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
    post:
      summary: Creates a new booking
      tags:
      - Bookings
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: client_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '201':
          description: booking created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  client_id:
                    type: integer
                  service_point_id:
                    type: integer
                  booking_date:
                    type: string
                    format: date
                  start_time:
                    type: string
                  end_time:
                    type: string
                  status:
                    type: object
                    properties:
                      id:
                        oneOf:
                        - type: integer
                        - type: 'null'
                      name:
                        type: string
                  total_price:
                    oneOf:
                    - type: number
                    - type: string
                      pattern: "^\\d+(\\.\\d+)?$"
                    - type: 'null'
                  car_type:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      description:
                        type: string
        '422':
          description: invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                booking:
                  type: object
                  properties:
                    service_point_id:
                      type: integer
                    booking_date:
                      type: string
                      format: date
                    start_time:
                      type: string
                      format: time
                    end_time:
                      type: string
                      format: time
                    car_type_id:
                      type: integer
                    slot_id:
                      type: integer
                    services:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          quantity:
                            type: integer
                  required:
                  - service_point_id
                  - booking_date
                  - services
                  - car_type_id
                  - slot_id
  "/api/v1/clients/{client_id}/bookings/{id}":
    get:
      summary: Retrieves a booking
      tags:
      - Bookings
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: client_id
        in: path
        required: true
        schema:
          type: integer
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: booking found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  booking_date:
                    type: string
                    format: date
                  start_time:
                    type: string
                  end_time:
                    type: string
                  client_id:
                    type: integer
                  service_point_id:
                    type: integer
                  total_price:
                    oneOf:
                    - type: number
                    - type: string
                      pattern: "^\\d+(\\.\\d+)?$"
                    - type: 'null'
                  status:
                    type: object
                    properties:
                      id:
                        oneOf:
                        - type: integer
                        - type: 'null'
                      name:
                        type: string
                  car_type:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      description:
                        type: string
        '404':
          description: booking not found
    put:
      summary: Updates a booking
      tags:
      - Bookings
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: client_id
        in: path
        required: true
        schema:
          type: integer
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '422':
          description: booking validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      booking_date:
                        type: array
                        items:
                          type: string
        '404':
          description: booking not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                booking:
                  type: object
                  properties:
                    booking_date:
                      type: string
                      format: date
                    start_time:
                      type: string
                      format: time
                    end_time:
                      type: string
                      format: time
                    car_id:
                      type: integer
                    car_type_id:
                      type: integer
                    notes:
                      type: string
    delete:
      summary: Cancels a booking
      tags:
      - Bookings
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: client_id
        in: path
        required: true
        schema:
          type: integer
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: booking canceled
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  status:
                    type: object
                    properties:
                      id:
                        oneOf:
                        - type: integer
                        - type: 'null'
                      name:
                        type: string
                        example: canceled_by_client
        '404':
          description: booking not found
  "/api/v1/bookings/{id}/confirm":
    post:
      summary: Confirms a booking
      tags:
      - Bookings
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: booking confirmed
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  status:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                        example: confirmed
        '401':
          description: unauthorized
  "/api/v1/bookings/{id}/cancel":
    post:
      summary: Cancels a booking
      tags:
      - Bookings
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: booking canceled
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  status:
                    type: object
                    properties:
                      id:
                        oneOf:
                        - type: integer
                        - type: 'null'
                      name:
                        type: string
                        example: canceled_by_client
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                booking:
                  type: object
                  properties:
                    cancellation_reason_id:
                      type: integer
                    cancellation_comment:
                      type: string
  "/api/v1/cars":
    get:
      summary: Получает список автомобилей пользователя
      tags:
      - Cars
      description: Возвращает список автомобилей текущего пользователя
      operationId: getUserCars
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Список автомобилей
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Car"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
    post:
      summary: Добавляет новый автомобиль
      tags:
      - Cars
      description: Добавляет новый автомобиль в гараж пользователя
      operationId: createCar
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: Автомобиль добавлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/Car"
                  message:
                    type: string
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationErrorResponse"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                car:
                  "$ref": "#/components/schemas/CarRequest"
              required:
              - car
  "/api/v1/cars/{id}":
    parameters:
    - name: id
      in: path
      description: ID автомобиля
      required: true
      schema:
        type: integer
    get:
      summary: Получает информацию об автомобиле
      tags:
      - Cars
      description: Возвращает детальную информацию об автомобиле пользователя
      operationId: getCar
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Информация об автомобиле
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/CarDetailed"
        '404':
          description: Автомобиль не найден
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
    patch:
      summary: Обновляет информацию об автомобиле
      tags:
      - Cars
      description: Обновляет информацию об автомобиле пользователя
      operationId: updateCar
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: Автомобиль обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/Car"
                  message:
                    type: string
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                car:
                  "$ref": "#/components/schemas/CarRequest"
              required:
              - car
    delete:
      summary: Удаляет автомобиль
      tags:
      - Cars
      description: Удаляет автомобиль из гаража пользователя
      operationId: deleteCar
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Автомобиль удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Автомобиль успешно удален
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '404':
          description: Автомобиль не найден
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/catalogs/regions":
    get:
      summary: Получает список регионов
      tags:
      - Catalogs
      description: Возвращает список всех доступных регионов
      operationId: getRegions
      responses:
        '200':
          description: Список регионов
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Region"
  "/api/v1/catalogs/cities":
    get:
      summary: Получает список городов
      tags:
      - Catalogs
      description: Возвращает список городов с возможностью фильтрации по региону
      operationId: getCities
      parameters:
      - name: region_id
        in: query
        required: false
        description: ID региона для фильтрации
        schema:
          type: integer
      responses:
        '200':
          description: Список городов
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/City"
  "/api/v1/catalogs/car_brands":
    get:
      summary: Получает список марок автомобилей
      tags:
      - Catalogs
      description: Возвращает список всех марок автомобилей
      operationId: getCarBrands
      parameters:
      - name: query
        in: query
        required: false
        description: Поиск по названию марки
        schema:
          type: string
      responses:
        '200':
          description: Список марок автомобилей
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/CarBrand"
  "/api/v1/catalogs/car_models":
    get:
      summary: Получает список моделей автомобилей
      tags:
      - Catalogs
      description: Возвращает список моделей автомобилей с возможностью фильтрации
        по марке
      operationId: getCarModels
      parameters:
      - name: car_brand_id
        in: query
        required: false
        description: ID марки для фильтрации
        schema:
          type: integer
      - name: query
        in: query
        required: false
        description: Поиск по названию модели
        schema:
          type: string
      responses:
        '200':
          description: Список моделей автомобилей
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/CarModel"
  "/api/v1/catalogs/car_types":
    get:
      summary: Получает список типов автомобилей
      tags:
      - Catalogs
      description: Возвращает список типов автомобилей (седан, хэтчбек, кроссовер
        и т.д.)
      operationId: getCarTypes
      responses:
        '200':
          description: Список типов автомобилей
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/CarType"
  "/api/v1/catalogs/tire_types":
    get:
      summary: Получает список типов шин
      tags:
      - Catalogs
      description: Возвращает список типов шин (летние, зимние, всесезонные)
      operationId: getTireTypes
      responses:
        '200':
          description: Список типов шин
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/TireType"
  "/api/v1/catalogs/service_categories":
    get:
      summary: Получает список категорий услуг
      tags:
      - Catalogs
      description: Возвращает список категорий услуг (шиномонтаж, балансировка и т.д.)
      operationId: getServiceCategories
      responses:
        '200':
          description: Список категорий услуг
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/ServiceCategory"
  "/api/v1/catalogs/services":
    get:
      summary: Получает список услуг
      tags:
      - Catalogs
      description: Возвращает список услуг с возможностью фильтрации по категории
      operationId: getServices
      parameters:
      - name: service_category_id
        in: query
        required: false
        description: ID категории для фильтрации
        schema:
          type: integer
      - name: query
        in: query
        required: false
        description: Поиск по названию услуги
        schema:
          type: string
      responses:
        '200':
          description: Список услуг
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Service"
  "/api/v1/admin/catalogs/regions":
    post:
      summary: Создает новый регион
      tags:
      - Catalogs (Admin)
      description: Создает новый регион в системе
      operationId: createRegion
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: Регион создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/Region"
                  message:
                    type: string
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                region:
                  "$ref": "#/components/schemas/RegionRequest"
              required:
              - region
  "/api/v1/admin/catalogs/car_brands":
    post:
      summary: Создает новую марку автомобиля
      tags:
      - Catalogs (Admin)
      description: Создает новую марку автомобиля в системе
      operationId: createCarBrand
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: Марка автомобиля создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/CarBrand"
                  message:
                    type: string
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                car_brand:
                  "$ref": "#/components/schemas/CarBrandRequest"
              required:
              - car_brand
  "/api/v1/clients":
    get:
      summary: Получает список всех клиентов
      tags:
      - Clients
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: query
        in: query
        required: false
        description: Поиск по email, имени или фамилии
        schema:
          type: string
      - name: page
        in: query
        required: false
        description: Номер страницы для пагинации
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Количество элементов на странице
        schema:
          type: integer
      responses:
        '200':
          description: Найдены клиенты
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        user:
                          type: object
                          properties:
                            id:
                              type: integer
                            email:
                              type: string
                            phone:
                              type: string
                            first_name:
                              type: string
                            last_name:
                              type: string
                            middle_name:
                              type: string
                        preferred_notification_method:
                          type: string
                        marketing_consent:
                          type: boolean
                        created_at:
                          type: string
                          format: date_time
                        updated_at:
                          type: string
                          format: date_time
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
                      per_page:
                        type: integer
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
  "/api/v1/clients/{id}":
    get:
      summary: Получает информацию о конкретном клиенте
      tags:
      - Clients
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ID клиента
        schema:
          type: integer
      responses:
        '200':
          description: Клиент найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      phone:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      middle_name:
                        type: string
                  preferred_notification_method:
                    type: string
                  marketing_consent:
                    type: boolean
                  cars:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        brand:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                        model:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                        year:
                          type: integer
                        license_plate:
                          type: string
                  created_at:
                    type: string
                    format: date_time
                  updated_at:
                    type: string
                    format: date_time
        '404':
          description: Клиент не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Couldn't find Client with 'id'=999
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
    put:
      summary: Обновляет информацию о клиенте
      tags:
      - Clients
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ID клиента
        schema:
          type: integer
      responses:
        '200':
          description: Клиент обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      phone:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      middle_name:
                        type: string
                  preferred_notification_method:
                    type: string
                  marketing_consent:
                    type: boolean
                  created_at:
                    type: string
                    format: date_time
                  updated_at:
                    type: string
                    format: date_time
        '422':
          description: Некорректные параметры
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
        '403':
          description: Доступ запрещен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to perform this action
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                    phone:
                      type: string
                    first_name:
                      type: string
                    last_name:
                      type: string
                    middle_name:
                      type: string
                    password:
                      type: string
                    password_confirmation:
                      type: string
                client:
                  type: object
                  properties:
                    preferred_notification_method:
                      type: string
                      enum:
                      - email
                      - phone
                      - push
                    marketing_consent:
                      type: boolean
    delete:
      summary: Деактивирует клиента
      tags:
      - Clients
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ID клиента
        schema:
          type: integer
      responses:
        '200':
          description: Клиент деактивирован
        '403':
          description: Доступ запрещен
  "/api/v1/clients/social_auth":
    post:
      summary: Аутентификация через социальную сеть
      tags:
      - Clients
      parameters: []
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_token:
                    type: string
                  message:
                    type: string
                    example: Login successful
        '422':
          description: Ошибка аутентификации
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid token or provider
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                provider:
                  type: string
                  enum:
                  - google
                  - facebook
                  - apple
                  example: google
                token:
                  type: string
                  example: oauth2-token-from-provider
              required:
              - provider
              - token
  "/api/v1/dashboard/stats":
    get:
      summary: Получает общую статистику системы
      tags:
      - Dashboard
      description: Возвращает основные метрики и статистику для дашборда
      operationId: getDashboardStats
      security:
      - bearerAuth: []
      parameters:
      - name: period
        in: query
        required: false
        description: "Период для статистики:\n * `day` \n * `week` \n * `month` \n
          * `year` \n "
        enum:
        - day
        - week
        - month
        - year
        schema:
          type: string
      responses:
        '200':
          description: Статистика дашборда
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      bookings:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 1250
                          completed:
                            type: integer
                            example: 1100
                          cancelled:
                            type: integer
                            example: 50
                          pending:
                            type: integer
                            example: 100
                          growth:
                            type: number
                            format: float
                            example: 12.5
                      revenue:
                        type: object
                        properties:
                          total:
                            type: number
                            format: float
                            example: 125000.0
                          current_period:
                            type: number
                            format: float
                            example: 25000.0
                          growth:
                            type: number
                            format: float
                            example: 15.3
                      service_points:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 45
                          active:
                            type: integer
                            example: 42
                          new_this_period:
                            type: integer
                            example: 3
                      users:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 2500
                          new_this_period:
                            type: integer
                            example: 150
                          active:
                            type: integer
                            example: 1800
                      reviews:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 890
                          average_rating:
                            type: number
                            format: float
                            example: 4.3
                          new_this_period:
                            type: integer
                            example: 45
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/dashboard/charts/bookings":
    get:
      summary: Получает данные для графика бронирований
      tags:
      - Dashboard
      description: Возвращает данные для построения графиков статистики бронирований
      operationId: getBookingsChart
      security:
      - bearerAuth: []
      parameters:
      - name: period
        in: query
        required: false
        description: "Период для графика:\n * `week` \n * `month` \n * `quarter` \n
          * `year` \n "
        enum:
        - week
        - month
        - quarter
        - year
        schema:
          type: string
      - name: group_by
        in: query
        required: false
        description: Группировка данных
        enum:
        - day
        - week
        - month
        schema:
          type: string
      responses:
        '200':
          description: Данные графика бронирований
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      labels:
                        type: array
                        items:
                          type: string
                        example:
                        - '2024-01-01'
                        - '2024-01-02'
                        - '2024-01-03'
                      datasets:
                        type: array
                        items:
                          type: object
                          properties:
                            label:
                              type: string
                              example: Завершенные
                            data:
                              type: array
                              items:
                                type: integer
                              example:
                              - 15
                              - 22
                              - 18
                            backgroundColor:
                              type: string
                              example: "#4CAF50"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/dashboard/charts/revenue":
    get:
      summary: Получает данные для графика доходов
      tags:
      - Dashboard
      description: Возвращает данные для построения графиков доходов
      operationId: getRevenueChart
      security:
      - bearerAuth: []
      parameters:
      - name: period
        in: query
        required: false
        description: "Период для графика:\n * `week` \n * `month` \n * `quarter` \n
          * `year` \n "
        enum:
        - week
        - month
        - quarter
        - year
        schema:
          type: string
      - name: group_by
        in: query
        required: false
        description: Группировка данных
        enum:
        - day
        - week
        - month
        schema:
          type: string
      responses:
        '200':
          description: Данные графика доходов
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      labels:
                        type: array
                        items:
                          type: string
                        example:
                        - Январь
                        - Февраль
                        - Март
                      datasets:
                        type: array
                        items:
                          type: object
                          properties:
                            label:
                              type: string
                              example: Доходы
                            data:
                              type: array
                              items:
                                type: number
                              example:
                              - 15000.5
                              - 22300.75
                              - 18900.25
                            backgroundColor:
                              type: string
                              example: "#2196F3"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/dashboard/top-services":
    get:
      summary: Получает топ популярных услуг
      tags:
      - Dashboard
      description: Возвращает список самых популярных услуг
      operationId: getTopServices
      security:
      - bearerAuth: []
      parameters:
      - name: limit
        in: query
        required: false
        description: Количество услуг
        schema:
          type: integer
      - name: period
        in: query
        required: false
        description: "Период для анализа:\n * `week` \n * `month` \n * `quarter` \n
          * `year` \n "
        enum:
        - week
        - month
        - quarter
        - year
        schema:
          type: string
      responses:
        '200':
          description: Топ услуг
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        service:
                          "$ref": "#/components/schemas/Service"
                        bookings_count:
                          type: integer
                          example: 150
                        revenue:
                          type: number
                          format: float
                          example: 75000.0
                        growth:
                          type: number
                          format: float
                          example: 12.5
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/dashboard/partner/{partner_id}/stats":
    parameters:
    - name: partner_id
      in: path
      description: ID партнера
      required: true
      schema:
        type: integer
    get:
      summary: Получает статистику для конкретного партнера
      tags:
      - Dashboard
      description: Возвращает детальную статистику для партнера
      operationId: getPartnerStats
      security:
      - bearerAuth: []
      parameters:
      - name: period
        in: query
        required: false
        description: "Период для статистики:\n * `day` \n * `week` \n * `month` \n
          * `year` \n "
        enum:
        - day
        - week
        - month
        - year
        schema:
          type: string
      responses:
        '200':
          description: Статистика партнера
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      partner:
                        "$ref": "#/components/schemas/Partner"
                      stats:
                        type: object
                        properties:
                          service_points_count:
                            type: integer
                            example: 5
                          total_bookings:
                            type: integer
                            example: 250
                          completed_bookings:
                            type: integer
                            example: 230
                          total_revenue:
                            type: number
                            format: float
                            example: 125000.0
                          average_rating:
                            type: number
                            format: float
                            example: 4.5
                          reviews_count:
                            type: integer
                            example: 89
        '404':
          description: Партнер не найден
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/partners":
    get:
      summary: Получает список партнеров
      tags:
      - Partners
      description: Возвращает список всех партнеров с возможностью поиска и фильтрации
      operationId: getPartners
      security:
      - bearerAuth: []
      parameters:
      - name: page
        in: query
        required: false
        description: Номер страницы
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Количество на странице
        schema:
          type: integer
      - name: query
        in: query
        required: false
        description: Поиск по названию или email
        schema:
          type: string
      - name: status
        in: query
        required: false
        description: Фильтр по статусу
        schema:
          type: string
      responses:
        '200':
          description: Список партнеров
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Partner"
                  pagination:
                    "$ref": "#/components/schemas/Pagination"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
    post:
      summary: Создает нового партнера
      tags:
      - Partners
      description: Создает нового партнера в системе
      operationId: createPartner
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: Партнер создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/Partner"
                  message:
                    type: string
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                partner:
                  "$ref": "#/components/schemas/PartnerRequest"
              required:
              - partner
  "/api/v1/partners/{id}":
    parameters:
    - name: id
      in: path
      description: ID партнера
      required: true
      schema:
        type: integer
    get:
      summary: Получает информацию о партнере
      tags:
      - Partners
      description: Возвращает детальную информацию о партнере
      operationId: getPartner
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Информация о партнере
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/PartnerDetailed"
        '404':
          description: Партнер не найден
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
    patch:
      summary: Обновляет информацию о партнере
      tags:
      - Partners
      description: Обновляет информацию о партнере
      operationId: updatePartner
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: Партнер обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/Partner"
                  message:
                    type: string
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                partner:
                  "$ref": "#/components/schemas/PartnerRequest"
              required:
              - partner
    delete:
      summary: Деактивирует партнера
      tags:
      - Partners
      description: Деактивирует партнера в системе
      operationId: deactivatePartner
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Партнер деактивирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Партнер успешно деактивирован
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/reviews":
    get:
      summary: Получает список отзывов
      tags:
      - Reviews
      description: Возвращает список отзывов с возможностью фильтрации
      operationId: getReviews
      parameters:
      - name: service_point_id
        in: query
        required: false
        description: ID сервисной точки
        schema:
          type: integer
      - name: rating
        in: query
        required: false
        description: Фильтр по рейтингу (1-5)
        schema:
          type: integer
      - name: page
        in: query
        required: false
        description: Номер страницы
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Количество на странице
        schema:
          type: integer
      responses:
        '200':
          description: Список отзывов
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Review"
                  pagination:
                    "$ref": "#/components/schemas/Pagination"
    post:
      summary: Создает новый отзыв
      tags:
      - Reviews
      description: Создает новый отзыв для завершенного бронирования
      operationId: createReview
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: Отзыв создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/Review"
                  message:
                    type: string
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  "$ref": "#/components/schemas/ReviewRequest"
              required:
              - review
  "/api/v1/reviews/{id}":
    parameters:
    - name: id
      in: path
      description: ID отзыва
      required: true
      schema:
        type: integer
    get:
      summary: Получает информацию об отзыве
      tags:
      - Reviews
      description: Возвращает детальную информацию об отзыве
      operationId: getReview
      responses:
        '200':
          description: Информация об отзыве
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/ReviewDetailed"
        '404':
          description: Отзыв не найден
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
    patch:
      summary: Обновляет отзыв
      tags:
      - Reviews
      description: Обновляет отзыв (только автор может редактировать свой отзыв)
      operationId: updateReview
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: Отзыв обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/Review"
                  message:
                    type: string
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  "$ref": "#/components/schemas/ReviewUpdateRequest"
              required:
              - review
    delete:
      summary: Удаляет отзыв
      tags:
      - Reviews
      description: Удаляет отзыв (только автор или администратор)
      operationId: deleteReview
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Отзыв удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Отзыв успешно удален
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '404':
          description: Отзыв не найден
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/service_points/{service_point_id}/reviews":
    parameters:
    - name: service_point_id
      in: path
      description: ID сервисной точки
      required: true
      schema:
        type: integer
    get:
      summary: Получает отзывы для сервисной точки
      tags:
      - Reviews
      description: Возвращает все отзывы для конкретной сервисной точки
      operationId: getServicePointReviews
      parameters:
      - name: rating
        in: query
        required: false
        description: Фильтр по рейтингу (1-5)
        schema:
          type: integer
      - name: page
        in: query
        required: false
        description: Номер страницы
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Количество на странице
        schema:
          type: integer
      responses:
        '200':
          description: Отзывы сервисной точки
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Review"
                  pagination:
                    "$ref": "#/components/schemas/Pagination"
                  stats:
                    type: object
                    properties:
                      average_rating:
                        type: number
                        format: float
                        example: 4.5
                      total_reviews:
                        type: integer
                        example: 150
                      rating_distribution:
                        type: object
                        properties:
                          '5':
                            type: integer
                            example: 80
                          '4':
                            type: integer
                            example: 40
                          '3':
                            type: integer
                            example: 20
                          '2':
                            type: integer
                            example: 7
                          '1':
                            type: integer
                            example: 3
        '404':
          description: Сервисная точка не найдена
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/service_points/{service_point_id}/photos":
    get:
      summary: Получает все фотографии сервисной точки
      tags:
      - Service Point Photos
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: service_point_id
        in: path
        required: true
        description: ID сервисной точки
        schema:
          type: integer
      responses:
        '200':
          description: Найдены фотографии
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    url:
                      type: string
                    description:
                      type:
                      - string
                      - 'null'
                    is_main:
                      type: boolean
                    sort_order:
                      type: integer
                    created_at:
                      type: string
                      format: date_time
                    updated_at:
                      type: string
                      format: date_time
        '404':
          description: Сервисная точка не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Couldn't find ServicePoint with 'id'=999
    post:
      summary: Загружает новую фотографию для сервисной точки
      tags:
      - Service Point Photos
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: service_point_id
        in: path
        required: true
        description: ID сервисной точки
        schema:
          type: integer
      responses:
        '201':
          description: Фотография загружена
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  photo_url:
                    type: string
                  description:
                    type: string
                  sort_order:
                    type: integer
                  created_at:
                    type: string
                    format: date_time
        '403':
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Доступ запрещен
        '422':
          description: Неверные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: file
        required: true
        description: Файл изображения
  "/api/v1/service_points/{service_point_id}/photos/{id}":
    get:
      summary: Получает конкретную фотографию сервисной точки
      tags:
      - Service Point Photos
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: service_point_id
        in: path
        required: true
        description: ID сервисной точки
        schema:
          type: integer
      - name: id
        in: path
        required: true
        description: ID фотографии
        schema:
          type: integer
      responses:
        '200':
          description: Фотография найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  url:
                    type: string
                  description:
                    type:
                    - string
                    - 'null'
                  is_main:
                    type: boolean
                  sort_order:
                    type: integer
                  created_at:
                    type: string
                    format: date_time
                  updated_at:
                    type: string
                    format: date_time
        '404':
          description: Фотография не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Couldn't find ServicePointPhoto with 'id'=999
    patch:
      summary: Обновляет данные фотографии
      tags:
      - Service Point Photos
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: service_point_id
        in: path
        required: true
        description: ID сервисной точки
        schema:
          type: integer
      - name: id
        in: path
        required: true
        description: ID фотографии
        schema:
          type: integer
      responses:
        '200':
          description: Фотография обновлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  url:
                    type: string
                  description:
                    type: string
                  sort_order:
                    type: integer
        '403':
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Доступ запрещен
        '422':
          description: Неверные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                sort_order:
                  type: integer
    delete:
      summary: Удаляет фотографию
      tags:
      - Service Point Photos
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: service_point_id
        in: path
        required: true
        description: ID сервисной точки
        schema:
          type: integer
      - name: id
        in: path
        required: true
        description: ID фотографии
        schema:
          type: integer
      responses:
        '200':
          description: Фотография удалена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Photo was successfully deleted
        '403':
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Доступ запрещен
        '404':
          description: Фотография не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Couldn't find ServicePointPhoto
  "/api/v1/service_points":
    get:
      summary: Получает список всех сервисных точек
      tags:
      - Service Points
      parameters:
      - name: city_id
        in: query
        required: false
        description: Фильтрация по ID города
        schema:
          type: integer
      - name: amenity_ids
        in: query
        required: false
        description: 'Фильтрация по удобствам, ID через запятую (например: 1,2,3)'
        schema:
          type: string
      - name: query
        in: query
        required: false
        description: Поиск по названию или адресу
        schema:
          type: string
      - name: sort_by
        in: query
        required: false
        description: 'Поле для сортировки (например: rating, name, created_at)'
        schema:
          type: string
      - name: sort_direction
        in: query
        required: false
        description: Направление сортировки (asc или desc)
        schema:
          type: string
      - name: page
        in: query
        required: false
        description: Номер страницы для пагинации
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Количество элементов на странице
        schema:
          type: integer
      responses:
        '200':
          description: Найдены сервисные точки
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        address:
                          type: string
                        latitude:
                          type: string
                        longitude:
                          type: string
                        contact_phone:
                          type: string
                        city:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                        average_rating:
                          type: string
                        total_clients_served:
                          type: integer
                        cancellation_rate:
                          type: string
                        post_count:
                          type: integer
                        status:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                            color:
                              type:
                              - string
                              - 'null'
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
                      per_page:
                        type: integer
  "/api/v1/partners/{partner_id}/service_points":
    get:
      summary: Получает список сервисных точек конкретного партнера
      tags:
      - Service Points
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: partner_id
        in: path
        required: true
        description: ID партнера
        schema:
          type: integer
      - name: page
        in: query
        required: false
        description: Номер страницы для пагинации
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Количество элементов на странице
        schema:
          type: integer
      responses:
        '200':
          description: Найдены сервисные точки
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        address:
                          type: string
                        status:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                            color:
                              type:
                              - string
                              - 'null'
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
                      per_page:
                        type: integer
    post:
      summary: Создает сервисную точку с постами с индивидуальными расписаниями
      tags:
      - Service Points
      - Service Posts
      parameters: []
      responses:
        '201':
          description: Сервисная точка с постами создана успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: ID сервисной точки
                      name:
                        type: string
                        description: Название сервисной точки
                      service_posts:
                        type: array
                        description: Посты обслуживания
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                            post_number:
                              type: integer
                            name:
                              type: string
                            has_custom_schedule:
                              type: boolean
                            working_days:
                              type: object
                            custom_hours:
                              type: object
                            working_days_list:
                              type: array
                              items:
                                type: string
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    description: Ошибки валидации
        '403':
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Доступ запрещен
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      description: Создает новую сервисную точку с постами обслуживания, включая возможность
        настройки индивидуальных расписаний для каждого поста
      operationId: createServicePointWithCustomSchedulePosts
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service_point:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Название сервисной точки
                      example: Автосервис с индивидуальными расписаниями
                    address:
                      type: string
                      description: Адрес сервисной точки
                      example: ул. Примерная, 123
                    city_id:
                      type: integer
                      description: ID города
                      example: 1
                    service_posts_attributes:
                      type: array
                      description: Посты обслуживания с возможностью индивидуальных
                        расписаний
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: Название поста
                            example: Пост экспресс-обслуживания
                          post_number:
                            type: integer
                            description: Номер поста
                            example: 1
                          slot_duration:
                            type: integer
                            description: Длительность слота в минутах
                            example: 30
                          has_custom_schedule:
                            type: boolean
                            description: Имеет ли пост индивидуальное расписание
                            example: true
                          working_days:
                            type: object
                            description: Рабочие дни недели для индивидуального расписания
                            example:
                              monday: true
                              tuesday: false
                              wednesday: true
                              thursday: true
                              friday: false
                              saturday: false
                              sunday: false
                          custom_hours:
                            type: object
                            description: Индивидуальные часы работы поста
                            properties:
                              start:
                                type: string
                                description: Время начала работы в формате HH:MM
                                example: '10:00'
                              end:
                                type: string
                                description: Время окончания работы в формате HH:MM
                                example: '19:00'
                        required:
                        - name
                        - post_number
                        - slot_duration
                  required:
                  - name
                  - address
                  - city_id
              required:
              - service_point
    parameters:
    - name: partner_id
      in: path
      description: ID партнера
      required: true
      schema:
        type: integer
  "/api/v1/service_points/{id}":
    get:
      summary: Получает информацию о сервисной точке
      tags:
      - Service Points
      parameters:
      - name: id
        in: path
        required: true
        description: ID сервисной точки
        schema:
          type: integer
      responses:
        '200':
          description: Сервисная точка найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  address:
                    type: string
                  latitude:
                    type: string
                  longitude:
                    type: string
                  contact_phone:
                    type: string
                  average_rating:
                    type: string
                  total_clients_served:
                    type: integer
                  cancellation_rate:
                    type: string
                  post_count:
                    type: integer
                  default_slot_duration:
                    type: integer
                  partner:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                  city:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                  status:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      color:
                        type:
                        - string
                        - 'null'
                  amenities:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        icon:
                          type: string
                  photos:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        url:
                          type: string
                        sort_order:
                          type: integer
        '404':
          description: Сервисная точка не найдена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Couldn't find ServicePoint with 'id'=999
  "/api/v1/partners/{partner_id}/service_points/{id}":
    patch:
      summary: Обновляет информацию о сервисной точке
      tags:
      - Service Points
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: partner_id
        in: path
        required: true
        description: ID партнера
        schema:
          type: integer
      - name: id
        in: path
        required: true
        description: ID сервисной точки
        schema:
          type: integer
      responses:
        '200':
          description: Сервисная точка обновлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
        '422':
          description: Невалидные параметры
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
        '403':
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Доступ запрещен
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service_point:
                  type: object
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    address:
                      type: string
                    city_id:
                      type: integer
                    latitude:
                      type: number
                      format: float
                    longitude:
                      type: number
                      format: float
                    contact_phone:
                      type: string
                    post_count:
                      type: integer
                    default_slot_duration:
                      type: integer
                    status_id:
                      type: integer
    delete:
      summary: Закрывает (деактивирует) сервисную точку
      tags:
      - Service Points
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
      - name: partner_id
        in: path
        required: true
        description: ID партнера
        schema:
          type: integer
      - name: id
        in: path
        required: true
        description: ID сервисной точки
        schema:
          type: integer
      responses:
        '200':
          description: Сервисная точка закрыта успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Service point closed successfully
        '403':
          description: Отказано в доступе
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Доступ запрещен
  "/api/v1/service_points/nearby":
    get:
      summary: Получает список ближайших сервисных точек
      tags:
      - Service Points
      parameters:
      - name: latitude
        in: query
        required: true
        description: Широта точки поиска
        schema:
          type: number
      - name: longitude
        in: query
        required: true
        description: Долгота точки поиска
        schema:
          type: number
      - name: distance
        in: query
        required: false
        description: Радиус поиска в километрах (по умолчанию 10km)
        schema:
          type: number
      - name: page
        in: query
        required: false
        description: Номер страницы для пагинации
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Количество элементов на странице
        schema:
          type: integer
      responses:
        '200':
          description: Найдены ближайшие сервисные точки
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        address:
                          type: string
                        latitude:
                          type: string
                        longitude:
                          type: string
                        distance:
                          type: number
                          format: float
                  pagination:
                    type: object
                    properties:
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      total_count:
                        type: integer
                      per_page:
                        type: integer
  "/api/v1/users/me":
    get:
      summary: Получает информацию о текущем пользователе
      tags:
      - Users
      description: Возвращает информацию о текущем авторизованном пользователе
      operationId: getCurrentUser
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/User"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/users":
    get:
      summary: Получает список всех пользователей
      tags:
      - Users
      description: Возвращает список всех пользователей системы (только для администраторов)
      operationId: getUsers
      security:
      - bearerAuth: []
      parameters:
      - name: page
        in: query
        required: false
        description: Номер страницы
        schema:
          type: integer
      - name: per_page
        in: query
        required: false
        description: Количество на странице
        schema:
          type: integer
      - name: query
        in: query
        required: false
        description: Поиск по email/имени
        schema:
          type: string
      - name: active
        in: query
        required: false
        description: Фильтр по активности
        schema:
          type: string
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/User"
                  pagination:
                    "$ref": "#/components/schemas/Pagination"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
    post:
      summary: Создает нового пользователя
      tags:
      - Users
      description: Создает нового пользователя в системе (только для администраторов)
      operationId: createUser
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/User"
                  message:
                    type: string
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  "$ref": "#/components/schemas/UserCreateRequest"
              required:
              - user
  "/api/v1/users/{id}":
    parameters:
    - name: id
      in: path
      description: ID пользователя
      required: true
      schema:
        type: integer
    get:
      summary: Получает информацию о пользователе
      tags:
      - Users
      description: Возвращает информацию о конкретном пользователе
      operationId: getUser
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/User"
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
    patch:
      summary: Обновляет информацию о пользователе
      tags:
      - Users
      description: Обновляет информацию о пользователе
      operationId: updateUser
      security:
      - bearerAuth: []
      parameters: []
      responses:
        '200':
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    "$ref": "#/components/schemas/User"
                  message:
                    type: string
        '422':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ValidationErrorResponse"
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  "$ref": "#/components/schemas/UserUpdateRequest"
              required:
              - user
    delete:
      summary: Деактивирует пользователя
      tags:
      - Users
      description: Деактивирует пользователя в системе
      operationId: deactivateUser
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Пользователь деактивирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Пользователь успешно деактивирован
        '403':
          description: Недостаточно прав доступа
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
servers:
- url: http://localhost:8000
  description: Development server
- url: https://api.tire-service.com
  description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен для аутентификации. Получается через эндпоинт /api/v1/auth/login
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Сообщение об ошибке
        details:
          type: object
          description: Дополнительные детали ошибки
      required:
      - error
    ValidationError:
      type: object
      properties:
        errors:
          type: object
          description: Ошибки валидации по полям
      required:
      - errors
tags:
- name: Authentication
  description: Аутентификация и авторизация пользователей
- name: Clients
  description: Управление клиентами
- name: Partners
  description: Управление партнерами
- name: Service Points
  description: Управление сервисными точками
- name: Bookings
  description: Управление бронированиями
- name: Photos
  description: Управление фотографиями сервисных точек
- name: Catalogs
  description: Справочники и каталоги
- name: System
  description: Системные эндпоинты
