# lib/tasks/sequences.rake
# –ó–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ PostgreSQL

namespace :db do
  desc "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π PostgreSQL –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"
  task fix_sequences: :environment do
    puts "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π PostgreSQL..."
    
    begin
      results = DatabaseSequences.fix_all_sequences!
      
      if results.nil? || results.empty?
        puts "‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ PostgreSQL –∏–ª–∏ test –æ–∫—Ä—É–∂–µ–Ω–∏–µ)"
        next
      end
      
      puts "\nüéâ –ì–æ—Ç–æ–≤–æ!"
      puts "   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: #{results[:fixed]}"
      puts "   –û—à–∏–±–æ–∫: #{results[:errors]}"
      puts "   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: #{results[:checked]}"
      
    rescue => e
      puts "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: #{e.message}"
      exit 1
    end
  end
  
  desc "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π PostgreSQL"
  task check_sequences: :environment do
    puts "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π PostgreSQL..."
    
    begin
      problems = DatabaseSequences.check_all_sequences
      
      if problems.nil?
        puts "‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ PostgreSQL –∏–ª–∏ test –æ–∫—Ä—É–∂–µ–Ω–∏–µ)"
        next
      end
      
      problems_found = problems.count { |p| p[:has_problem] }
      
      problems.each do |problem|
        if problem[:has_problem]
          if problem[:error]
            puts "‚ùå #{problem[:table].ljust(25)} -> –û—à–∏–±–∫–∞: #{problem[:error]}"
          else
            puts "‚ö†Ô∏è  #{problem[:table].ljust(25)} -> –ü—Ä–æ–±–ª–µ–º–∞! –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: #{problem[:current_sequence]}, –ú–∞–∫—Å ID: #{problem[:max_id]}, –ó–∞–ø–∏—Å–µ–π: #{problem[:record_count]}"
          end
        else
          puts "‚úÖ #{problem[:table].ljust(25)} -> OK (#{problem[:current_sequence]} > #{problem[:max_id]}), –ó–∞–ø–∏—Å–µ–π: #{problem[:record_count]}"
        end
      end
      
      puts "\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:"
      if problems_found > 0
        puts "   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: #{problems_found}"
        puts "   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: rake db:fix_sequences"
      else
        puts "   ‚úÖ –í—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ!"
      end
      
    rescue => e
      puts "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: #{e.message}"
      exit 1
    end
  end
  
  desc "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö"
  task sequences_info: :environment do
    puts "üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö PostgreSQL:"
    puts "=" * 80
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    sequences = ActiveRecord::Base.connection.execute(
      "SELECT schemaname, sequencename, last_value, increment_by FROM pg_sequences WHERE schemaname = 'public'"
    )
    
    sequences.each do |seq|
      table_name = seq['sequencename'].gsub('_id_seq', '')
      
      if ActiveRecord::Base.connection.table_exists?(table_name)
        max_id = ActiveRecord::Base.connection.execute(
          "SELECT MAX(id) FROM #{table_name}"
        ).first['max'] || 0
        
        count = ActiveRecord::Base.connection.execute(
          "SELECT COUNT(*) FROM #{table_name}"
        ).first['count']
        
        status = seq['last_value'].to_i > max_id.to_i ? "‚úÖ OK" : "‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê"
        
        puts "#{table_name.ljust(25)} | –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: #{seq['last_value'].to_s.ljust(5)} | –ú–∞–∫—Å ID: #{max_id.to_s.ljust(5)} | –ó–∞–ø–∏—Å–µ–π: #{count.to_s.ljust(5)} | #{status}"
      end
    end
    
    puts "=" * 80
  end
end 