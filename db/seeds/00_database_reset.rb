# db/seeds/00_database_reset.rb
# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —É–¥–∞–ª–µ–Ω–∏—è

class DatabaseReset
  def self.perform!
    puts "=== –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ==="
    puts "–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏..."

    # –û—Ç–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    disable_foreign_keys

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    models_to_clear = get_models_in_deletion_order

    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    clear_all_tables(models_to_clear)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    reset_sequences(models_to_clear)

    # –í–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ
    enable_foreign_keys

    puts "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!"
    puts "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:"
    print_database_stats
  end

  private

  def self.disable_foreign_keys
    case ActiveRecord::Base.connection.adapter_name
    when "PostgreSQL"
      puts "üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (PostgreSQL)..."
      ActiveRecord::Base.connection.execute("SET session_replication_role = 'replica';")
    when "SQLite"
      puts "üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (SQLite)..."
      ActiveRecord::Base.connection.execute("PRAGMA foreign_keys = OFF;")
    when "Mysql2"
      puts "üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (MySQL)..."
      ActiveRecord::Base.connection.execute("SET FOREIGN_KEY_CHECKS = 0;")
    end
  end

  def self.enable_foreign_keys
    case ActiveRecord::Base.connection.adapter_name
    when "PostgreSQL"
      puts "üîì –í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (PostgreSQL)..."
      ActiveRecord::Base.connection.execute("SET session_replication_role = 'origin';")
    when "SQLite"
      puts "üîì –í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (SQLite)..."
      ActiveRecord::Base.connection.execute("PRAGMA foreign_keys = ON;")
    when "Mysql2"
      puts "üîì –í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π (MySQL)..."
      ActiveRecord::Base.connection.execute("SET FOREIGN_KEY_CHECKS = 1;")
    end
  end

  def self.get_models_in_deletion_order
    # –ü–æ—Ä—è–¥–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –ø–æ—Ç–æ–º –æ—Å–Ω–æ–≤–Ω—ã–µ
    [
      # –°–≤—è–∑—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–≤–∏—Å–∏–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
      'Booking',
      'ServicePointService',
      'ServicePointAmenity', 
      'ServicePointPhoto',
      'ServicePost',
      'ScheduleTemplate',
      'Review',
      'Article',
      'PageContent',
      'ClientCar',
      'PaymentStatus',
      'BookingStatus',
      
      # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏
      'ServicePoint',
      'Service',
      'ServiceCategory',
      'Amenity',
      'Client',
      'Administrator',
      'Operator', 
      'Partner',
      'CarModel',
      'CarBrand',
      'CarType',
      
      # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      'City',
      'Region',
      
      # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ä–æ–ª–∏ (—É–¥–∞–ª—è–µ–º –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å)
      'User',
      'UserRole'
    ].map { |model_name| 
      begin
        model_name.constantize
      rescue NameError
        puts "‚ö†Ô∏è  –ú–æ–¥–µ–ª—å #{model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
        nil
      end
    }.compact
  end

  def self.clear_all_tables(models)
    puts "\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü..."
    
    total_deleted = 0
    
    models.each do |model|
      next unless table_exists?(model)
      
      begin
        count = model.count
        if count > 0
          model.delete_all
          puts "  ‚úÖ #{model.name}: —É–¥–∞–ª–µ–Ω–æ #{count} –∑–∞–ø–∏—Å–µ–π"
          total_deleted += count
        else
          puts "  ‚ö™ #{model.name}: —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –ø—É—Å—Ç–∞"
        end
      rescue => e
        puts "  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ #{model.name}: #{e.message}"
      end
    end
    
    puts "\nüìä –ò—Ç–æ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: #{total_deleted}"
  end

  def self.reset_sequences(models)
    return unless ActiveRecord::Base.connection.adapter_name == "PostgreSQL"
    
    puts "\nüîÑ –°–±—Ä–æ—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π PostgreSQL..."
    
    models.each do |model|
      next unless table_exists?(model)
      
      begin
        sequence_name = "#{model.table_name}_id_seq"
        ActiveRecord::Base.connection.execute("ALTER SEQUENCE #{sequence_name} RESTART WITH 1;")
        puts "  ‚úÖ –°–±—Ä–æ—à–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è #{model.name}"
      rescue => e
        puts "  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è #{model.name}: #{e.message}"
      end
    end
  end

  def self.table_exists?(model)
    ActiveRecord::Base.connection.table_exists?(model.table_name)
  end

  def self.print_database_stats
    stats = {}
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    [UserRole, User, Region, City, ServiceCategory, Service, ServicePoint, 
     Partner, Client, Booking].each do |model|
      if table_exists?(model)
        stats[model.name] = model.count
      end
    end
    
    stats.each do |model_name, count|
      puts "  #{model_name}: #{count} –∑–∞–ø–∏—Å–µ–π"
    end
  end
end

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if __FILE__ == $0 || ENV['FORCE_RESET'] == 'true'
  DatabaseReset.perform!
end 